#!/bin/bash

set -eu

readonly DOTFILES_ROOT="$HOME/dotfiles"
readonly DOTFILES="dotfiles"

#===========================================================================#
# common functions
#===========================================================================#

print() {
  printf "\e[4m$DOTFILES\e[0m: "
  echo "$@"
}

cmd_exec() {
  print "$@"
  "$@"
}

command_exist() {
  which "$1" >/dev/null 2>&1
  return $?
}

subcommand_exists() {
  local cmd=$1
  grep -q "^cmd_$cmd(" "$DOTFILES_ROOT/bin/dotfiles"
}

warning() {
  printf "\e[4m$DOTFILES\e[0m: \e[33m[Warning] "
  echo "$@"
  printf "\e[0m"
}

#===========================================================================#
# commands
#===========================================================================#

cmd_setup-osx() {
  cmd_link
  if ! command_exist xcode-select; then
    cmd_exec xcode-select --install
  fi

  cmd_exec cd $DOTFILES_ROOT

  # Link dotfiles command to $PATH
  if [ ! -L /usr/local/bin/dotfiles ] && [ ! -e /usr/local/bin/dotfiles ]; then
    cmd_exec ln -s $DOTFILES_ROOT/bin/dotfiles /usr/local/bin/dotfiles
  fi

  # Install Homebrew
  if ! command_exist brew; then
    cmd_exec  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
  fi

  # Install all dependencies in a Brewfile.
  cmd_exec brew bundle --verbose --file 'package/Brewfile.first'

  # Change shell
  if [ `echo $SHELL | grep 'bash'` ]; then
    sudo bash -c '/usr/local/bin/zsh >> /etc/shells'
    cmd_exec chsh -s /usr/local/bin/zsh
  fi

  # Install Vundle for vim
  if [ ! -d ~/.vim/bundle/Vundle.vim ]; then
    cmd_exec git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
  fi

  # Install anyenv
  if ! command_exist anyenv && ! -e ~/.anyenv; then
    cmd_exec git clone https://github.com/anyenv/anyenv ~/.anyenv
    echo 'export PATH="$HOME/.anyenv/bin:$PATH"' >> ~/.zshrc
    echo 'eval "$(anyenv init -)"' >> ~/.zshrc
    mkdir -p $(~/.anyenv/bin/anyenv root)/plugins
    git clone https://github.com/znz/anyenv-update.git $(~/.anyenv/bin/anyenv root)/plugins/anyenv-update
    if [ -d ~/.config/anyenv ]; then
      cmd_exec ~/.anyenv/bin/anyenv install --init
    fi
    cmd_exec ~/.anyenv/bin/anyenv update
  fi
  ! command_exist rbenv  && cmd_exec ~/.anyenv/bin/anyenv install rbenv
  ! command_exist pyenv  && cmd_exec ~/.anyenv/bin/anyenv install pyenv
  ! command_exist nodenv && cmd_exec ~/.anyenv/bin/anyenv install nodenv

  # Install latest ruby with rbenv 
  if ! command_exist rbenv; then
    local latest_ruby="$(eval ~/.anyenv/envs/rbenv/bin/rbenv install --list \
     | grep -v - \
     | grep -vE "([a-z]|[A-Z])" \
     | tail -1)"
  else
    local latest_ruby="$(eval rbenv install --list \
     | grep -v - \
     | grep -vE "([a-z]|[A-Z])" \
     | tail -1)"
  fi

  while true; do
    print -n "Do you want to Install Ruby $latest_ruby? [Y/n] "
    read answer
    case "${answer:-Y}" in
      [yY])
        if ! command_exist rbenv; then
          cmd_exec ~/.anyenv/envs/rbenv/bin/rbenv install $latest_ruby && ~/.anyenv/envs/rbenv/bin/rbenv rehash && ~/.anyenv/envs/rbenv/bin/rbenv global $latest_ruby
        else
          cmd_exec rbenv install $latest_ruby && rbenv rehash && rbenv global $latest_ruby
        fi
        break
        ;;
      [nN])
        break
        ;;
    esac
  done
  

  # Install latest python with pyenv
  if ! command_exist pyenv; then
    local latest_python2="$(eval ~/.anyenv/envs/rbenv/bin/pyenv install --list \
     | grep -v - \
     | grep -vE "([a-z]|[A-Z])" \
     | grep "2.7" \
     | tail -1)"
    local latest_python3="$(eval ~/.anyenv/envs/rbenv/bin/pyenv install --list \
     | grep -v - \
     | grep -vE "([a-z]|[A-Z])" \
     | tail -1)"
  else
    local latest_python2="$(eval pyenv install --list \
     | grep -v - \
     | grep -vE "([a-z]|[A-Z])" \
     | grep "2.7" \
     | tail -1)"
    local latest_python3="$(eval pyenv install --list \
     | grep -v - \
     | grep -vE "([a-z]|[A-Z])" \
     | tail -1)"
  fi
         
 
  while true; do
    print -n "Do you want to Install Python2 $latest_python2? [Y/n] "
    read answer
    case "${answer:-Y}" in
      [yY])
        if ! command_exist pyenv; then
          cmd_exec ~/.anyenv/envs/rbenv/bin/pyenv install $latest_python2 && ~/.anyenv/envs/rbenv/bin/pyenv rehash
        else
          cmd_exec pyenv install $latest_python2 && pyenv rehash
        fi
        break
        ;;
      [nN])
        break
        ;;
    esac
  done
 

  
  while true; do
    print -n "Do you want to Install Python3 $latest_python3? [Y/n] "
    read answer
    case "${answer:-Y}" in
      [yY])
        if ! command_exist pyenv; then
          cmd_exec ~/.anyenv/envs/rbenv/bin/pyenv install $latest_python3 && ~/.anyenv/envs/rbenv/bin/pyenv rehash && ~/.anyenv/envs/rbenv/bin/pyenv global $latest_python3
        else
          cmd_exec pyenv install $latest_python3 && pyenv rehash && pyenv global $latest_python3
        fi
        break
        ;;
      [nN])
        break
        ;;
    esac
  done

  # Install poetry
  if ! command_exist poetry; then
    cmd_exec /usr/bin/python -c "$(curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py)"
    echo 'export PATH="$HOME/.poetry/bin:$PATH"' >> ~/.zshrc
    cmd_exec ~/.poetry/bin/poetry self update
    cmd_exec ~/.poetry/bin/poetry completions zsh > $(brew --prefix)/share/zsh/site-functions/_poetry
    cmd_exec ~/.poetry/bin/poetry config virtualenvs.in-project true
  fi
  # Setup Atom
  #if ! command_exist apm; then
  #  cmd_exec apm install sync-settings
  #fi
  cmd_exec brew bundle --verbose --file 'package/Brewfile.second'
  exec $SHELL -l
}

cmd_setup-linux() {
  :
}

cmd_link() {
  cmd_exec cd "$DOTFILES_ROOT/home"

  for filename in .??*; do
    local file_dotfiles="$DOTFILES_ROOT/home/$filename"
    local file_home="$HOME/$filename"

    print
    if [[ ! -e $file_home ]]; then
      print "Creating symlink at $file_home"
      cmd_exec ln -s "$file_dotfiles" "$file_home"
    else
      if [[ -L $file_home ]]; then
        warning "symlink $file_home already exists."
      else
        warning "$file_home already exists but is not a symlink."
      fi
      while true; do
        print -n "Do you want to overwrite it? [Y/n] "
        read answer
        case "${answer:-Y}" in
          [yY])
            print "Creating symlink at $file_home"
            cmd_exec ln -sf "$file_dotfiles" "$file_home"
            break
            ;;
          [nN])
            break
            ;;
        esac
      done
    fi
  done
}

cmd_help() {
  echo "Script for dotfiles"
  echo
  echo "Usage:"
  echo "    bin/dotfiles [COMMAND] [ARGS...]"
  echo
  echo "Commands:"
  echo "    setup-osx    Setup macOS"
  echo "    setup-linux  Setup Linux"
  echo "    link         Link dotfiles"
}

# aliases
cmd_-h() { cmd_help; }
cmd_--help() { cmd_help; }

#===========================================================================#

main() {
  local cmd=$1
  shift

  if subcommand_exists "$cmd"; then
    "cmd_$cmd" "$@"
  else
    echo "ERROR: '$cmd' is not a dotfiles command."
  exit 1
  fi
}

main "$@"
